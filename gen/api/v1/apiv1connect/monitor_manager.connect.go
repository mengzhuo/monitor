// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/monitor_manager.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.ntppool.org/monitor/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MonitorServiceName is the fully-qualified name of the MonitorService service.
	MonitorServiceName = "api.v1.MonitorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MonitorServiceGetConfigProcedure is the fully-qualified name of the MonitorService's GetConfig
	// RPC.
	MonitorServiceGetConfigProcedure = "/api.v1.MonitorService/GetConfig"
	// MonitorServiceGetServersProcedure is the fully-qualified name of the MonitorService's GetServers
	// RPC.
	MonitorServiceGetServersProcedure = "/api.v1.MonitorService/GetServers"
	// MonitorServiceSubmitResultsProcedure is the fully-qualified name of the MonitorService's
	// SubmitResults RPC.
	MonitorServiceSubmitResultsProcedure = "/api.v1.MonitorService/SubmitResults"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	monitorServiceServiceDescriptor             = v1.File_api_v1_monitor_manager_proto.Services().ByName("MonitorService")
	monitorServiceGetConfigMethodDescriptor     = monitorServiceServiceDescriptor.Methods().ByName("GetConfig")
	monitorServiceGetServersMethodDescriptor    = monitorServiceServiceDescriptor.Methods().ByName("GetServers")
	monitorServiceSubmitResultsMethodDescriptor = monitorServiceServiceDescriptor.Methods().ByName("SubmitResults")
)

// MonitorServiceClient is a client for the api.v1.MonitorService service.
type MonitorServiceClient interface {
	GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
	// GetServers fetches list of NTP servers to check
	GetServers(context.Context, *connect.Request[v1.GetServersRequest]) (*connect.Response[v1.GetServersResponse], error)
	// SubmitResults returns the specified list ServerStatus to the monitoring server
	SubmitResults(context.Context, *connect.Request[v1.SubmitResultsRequest]) (*connect.Response[v1.SubmitResultsResponse], error)
}

// NewMonitorServiceClient constructs a client for the api.v1.MonitorService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMonitorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MonitorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &monitorServiceClient{
		getConfig: connect.NewClient[v1.GetConfigRequest, v1.GetConfigResponse](
			httpClient,
			baseURL+MonitorServiceGetConfigProcedure,
			connect.WithSchema(monitorServiceGetConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getServers: connect.NewClient[v1.GetServersRequest, v1.GetServersResponse](
			httpClient,
			baseURL+MonitorServiceGetServersProcedure,
			connect.WithSchema(monitorServiceGetServersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		submitResults: connect.NewClient[v1.SubmitResultsRequest, v1.SubmitResultsResponse](
			httpClient,
			baseURL+MonitorServiceSubmitResultsProcedure,
			connect.WithSchema(monitorServiceSubmitResultsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// monitorServiceClient implements MonitorServiceClient.
type monitorServiceClient struct {
	getConfig     *connect.Client[v1.GetConfigRequest, v1.GetConfigResponse]
	getServers    *connect.Client[v1.GetServersRequest, v1.GetServersResponse]
	submitResults *connect.Client[v1.SubmitResultsRequest, v1.SubmitResultsResponse]
}

// GetConfig calls api.v1.MonitorService.GetConfig.
func (c *monitorServiceClient) GetConfig(ctx context.Context, req *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// GetServers calls api.v1.MonitorService.GetServers.
func (c *monitorServiceClient) GetServers(ctx context.Context, req *connect.Request[v1.GetServersRequest]) (*connect.Response[v1.GetServersResponse], error) {
	return c.getServers.CallUnary(ctx, req)
}

// SubmitResults calls api.v1.MonitorService.SubmitResults.
func (c *monitorServiceClient) SubmitResults(ctx context.Context, req *connect.Request[v1.SubmitResultsRequest]) (*connect.Response[v1.SubmitResultsResponse], error) {
	return c.submitResults.CallUnary(ctx, req)
}

// MonitorServiceHandler is an implementation of the api.v1.MonitorService service.
type MonitorServiceHandler interface {
	GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
	// GetServers fetches list of NTP servers to check
	GetServers(context.Context, *connect.Request[v1.GetServersRequest]) (*connect.Response[v1.GetServersResponse], error)
	// SubmitResults returns the specified list ServerStatus to the monitoring server
	SubmitResults(context.Context, *connect.Request[v1.SubmitResultsRequest]) (*connect.Response[v1.SubmitResultsResponse], error)
}

// NewMonitorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMonitorServiceHandler(svc MonitorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	monitorServiceGetConfigHandler := connect.NewUnaryHandler(
		MonitorServiceGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(monitorServiceGetConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	monitorServiceGetServersHandler := connect.NewUnaryHandler(
		MonitorServiceGetServersProcedure,
		svc.GetServers,
		connect.WithSchema(monitorServiceGetServersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	monitorServiceSubmitResultsHandler := connect.NewUnaryHandler(
		MonitorServiceSubmitResultsProcedure,
		svc.SubmitResults,
		connect.WithSchema(monitorServiceSubmitResultsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.MonitorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MonitorServiceGetConfigProcedure:
			monitorServiceGetConfigHandler.ServeHTTP(w, r)
		case MonitorServiceGetServersProcedure:
			monitorServiceGetServersHandler.ServeHTTP(w, r)
		case MonitorServiceSubmitResultsProcedure:
			monitorServiceSubmitResultsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMonitorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMonitorServiceHandler struct{}

func (UnimplementedMonitorServiceHandler) GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MonitorService.GetConfig is not implemented"))
}

func (UnimplementedMonitorServiceHandler) GetServers(context.Context, *connect.Request[v1.GetServersRequest]) (*connect.Response[v1.GetServersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MonitorService.GetServers is not implemented"))
}

func (UnimplementedMonitorServiceHandler) SubmitResults(context.Context, *connect.Request[v1.SubmitResultsRequest]) (*connect.Response[v1.SubmitResultsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MonitorService.SubmitResults is not implemented"))
}
