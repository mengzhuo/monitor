// Code generated by "enumer -type=candidateState"; DO NOT EDIT.

package cmd

import (
	"fmt"
	"strings"
)

const _candidateStateName = "candidateUnknowncandidateIncandidateOutcandidateBlockcandidatePending"

var _candidateStateIndex = [...]uint8{0, 16, 27, 39, 53, 69}

const _candidateStateLowerName = "candidateunknowncandidateincandidateoutcandidateblockcandidatepending"

func (i candidateState) String() string {
	if i >= candidateState(len(_candidateStateIndex)-1) {
		return fmt.Sprintf("candidateState(%d)", i)
	}
	return _candidateStateName[_candidateStateIndex[i]:_candidateStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _candidateStateNoOp() {
	var x [1]struct{}
	_ = x[candidateUnknown-(0)]
	_ = x[candidateIn-(1)]
	_ = x[candidateOut-(2)]
	_ = x[candidateBlock-(3)]
	_ = x[candidatePending-(4)]
}

var _candidateStateValues = []candidateState{candidateUnknown, candidateIn, candidateOut, candidateBlock, candidatePending}

var _candidateStateNameToValueMap = map[string]candidateState{
	_candidateStateName[0:16]:       candidateUnknown,
	_candidateStateLowerName[0:16]:  candidateUnknown,
	_candidateStateName[16:27]:      candidateIn,
	_candidateStateLowerName[16:27]: candidateIn,
	_candidateStateName[27:39]:      candidateOut,
	_candidateStateLowerName[27:39]: candidateOut,
	_candidateStateName[39:53]:      candidateBlock,
	_candidateStateLowerName[39:53]: candidateBlock,
	_candidateStateName[53:69]:      candidatePending,
	_candidateStateLowerName[53:69]: candidatePending,
}

var _candidateStateNames = []string{
	_candidateStateName[0:16],
	_candidateStateName[16:27],
	_candidateStateName[27:39],
	_candidateStateName[39:53],
	_candidateStateName[53:69],
}

// candidateStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func candidateStateString(s string) (candidateState, error) {
	if val, ok := _candidateStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _candidateStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to candidateState values", s)
}

// candidateStateValues returns all values of the enum
func candidateStateValues() []candidateState {
	return _candidateStateValues
}

// candidateStateStrings returns a slice of all String values of the enum
func candidateStateStrings() []string {
	strs := make([]string, len(_candidateStateNames))
	copy(strs, _candidateStateNames)
	return strs
}

// IsAcandidateState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i candidateState) IsAcandidateState() bool {
	for _, v := range _candidateStateValues {
		if i == v {
			return true
		}
	}
	return false
}
